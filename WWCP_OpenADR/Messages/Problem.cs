/*
 * Copyright (c) 2014-2025 GraphDefined GmbH <achim.friedland@graphdefined.com>
 * This file is part of WWCP OpenADR <https://github.com/OpenChargingCloud/WWCP_OpenADR>
 *
 * Licensed under the Affero GPL license, Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.gnu.org/licenses/agpl.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#region Usings

using System.Diagnostics.CodeAnalysis;

using Newtonsoft.Json.Linq;

using org.GraphDefined.Vanaheimr.Illias;
using org.GraphDefined.Vanaheimr.Hermod.HTTP;

#endregion

namespace cloud.charging.open.protocols.OpenADRv3
{

    /// <summary>
    /// A reusable error response.
    /// </summary>
    /// <seealso cref="https://opensource.zalando.com/problem/schema.yaml"/>
    public class Problem
    {

        #region Properties

        /// <summary>
        /// The absolute URI that identifies the problem type.
        /// When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML).
        /// </summary>
        [Mandatory]
        public String           Type        { get; }

        /// <summary>
        /// The optional short, summary of the problem type.
        /// Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized)
        /// </summary>
        /// <example>Service Unavailable.</example>
        [Optional]
        public String?          Title       { get; }

        /// <summary>
        /// The optional HTTP status code generated by the origin server for this occurrence of the problem.
        /// </summary>
        [Optional]
        public HTTPStatusCode?  Status      { get; }

        /// <summary>
        /// The optional human readable explanation specific to this occurrence of the problem.
        /// </summary>
        /// <example>Connection to database timed out!</example>
        [Optional]
        public String?          Detail      { get; }

        /// <summary>
        /// The optional absolute URI that identifies the specific occurrence of the problem.
        /// It may or may not yield further information if dereferenced.
        /// </summary>
        [Optional]
        public String?          Instance    { get; }

        #endregion

        #region Constructor(s)

        /// <summary>
        /// Create a new problem.
        /// </summary>
        /// <param name="Type">An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML).</param>
        /// <param name="Title">An optional short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized)</param>
        /// <param name="Status">An optional HTTP status code generated by the origin server for this occurrence of the problem.</param>
        /// <param name="Detail">An optional human readable explanation specific to this occurrence of the problem.</param>
        /// <param name="Instance">An optional absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.</param>
        public Problem(String?          Type       = null,
                       String?          Title      = null,
                       HTTPStatusCode?  Status     = null,
                       String?          Detail     = null,
                       String?          Instance   = null)
        {

            this.Type      = Type ?? "about:blank";
            this.Title     = Title;
            this.Status    = Status;
            this.Detail    = Detail;
            this.Instance  = Instance;

            unchecked
            {

                hashCode = this.Type.     GetHashCode()       * 11 ^
                          (this.Title?.   GetHashCode() ?? 0) *  7 ^
                          (this.Status?.  GetHashCode() ?? 0) *  5 ^
                          (this.Detail?.  GetHashCode() ?? 0) *  3 ^
                           this.Instance?.GetHashCode() ?? 0;

            }

        }

        #endregion


        #region Documentation

        // problem:
        //   type: object
        //   description: |
        //     reusable error response. From https://opensource.zalando.com/problem/schema.yaml.
        //   properties:
        //     type:
        //       type: string
        //       format: uri
        //       description: |
        //         An absolute URI that identifies the problem type.
        //         When dereferenced, it SHOULD provide human-readable documentation for the problem type
        //         (e.g., using HTML).
        //       default: 'about:blank'
        //       example: 'https://zalando.github.io/problem/constraint-violation'
        //     title:
        //       type: string
        //       description: |
        //         A short, summary of the problem type. Written in english and readable
        //         for engineers (usually not suited for non technical stakeholders and
        //         not localized); example: Service Unavailable.
        //     status:
        //       type: integer
        //       format: int32
        //       description: |
        //         The HTTP status code generated by the origin server for this occurrence
        //         of the problem.
        //       minimum: 100
        //       maximum: 600
        //       exclusiveMaximum: true
        //       example: 503
        //     detail:
        //       type: string
        //       description: |
        //         A human readable explanation specific to this occurrence of the
        //         problem.
        //       example: Connection to database timed out
        //     instance:
        //       type: string
        //       format: uri
        //       description: |
        //         An absolute URI that identifies the specific occurrence of the problem.
        //         It may or may not yield further information if dereferenced.

        #endregion



        public JObject ToJSON()
            => new JObject(
                   new JProperty("type", Type),
                   new JProperty("title", Title),
                   new JProperty("status", Status?.ToString()),
                   new JProperty("detail", Detail),
                   new JProperty("instance", Instance)
               );


        #region (override) GetHashCode()

        private readonly Int32 hashCode;

        /// <summary>
        /// Return the hash code of this object.
        /// </summary>
        public override Int32 GetHashCode()
            => hashCode;

        #endregion


    }

}